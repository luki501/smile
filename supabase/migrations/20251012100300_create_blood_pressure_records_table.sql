-- Migration: Create blood_pressure_records table
-- Purpose: Store daily blood pressure and pulse measurements for users
-- Affected tables: blood_pressure_records
-- Created: 2025-10-12

-- create the blood_pressure_records table
-- this table stores daily blood pressure (systolic/diastolic) and pulse measurements
create table blood_pressure_records (
  id int generated by default as identity primary key,
  user_id uuid not null references users(id) on delete cascade,
  date date not null,
  systolic smallint not null,
  diastolic smallint not null,
  pulse smallint not null,
  created_at timestamptz not null default now()
);

comment on table blood_pressure_records is 'Stores blood pressure and pulse records.';
comment on column blood_pressure_records.id is 'Unique identifier for each blood pressure record';
comment on column blood_pressure_records.user_id is 'References the users table with cascade delete';
comment on column blood_pressure_records.date is 'Date of the blood pressure measurement';
comment on column blood_pressure_records.systolic is 'Systolic blood pressure value (mmHg)';
comment on column blood_pressure_records.diastolic is 'Diastolic blood pressure value (mmHg)';
comment on column blood_pressure_records.pulse is 'Pulse rate (beats per minute)';
comment on column blood_pressure_records.created_at is 'Timestamp when the record was created';

-- create index on user_id for efficient queries by user
create index idx_blood_pressure_records_user_id on blood_pressure_records(user_id);

-- create index on date for efficient date-based queries and chart generation
create index idx_blood_pressure_records_date on blood_pressure_records(date);

-- enable row level security
-- this ensures users can only access their own blood pressure records
alter table blood_pressure_records enable row level security;

-- create rls policy for select operations (anon role)
-- anon users cannot select any blood pressure records
create policy "anon_blood_pressure_records_select_policy"
on blood_pressure_records for select
to anon
using (false);

-- create rls policy for select operations (authenticated role)
-- authenticated users can only select their own blood pressure records
create policy "authenticated_blood_pressure_records_select_policy"
on blood_pressure_records for select
to authenticated
using (user_id = auth.uid());

-- create rls policy for insert operations (anon role)
-- anon users cannot insert blood pressure records
create policy "anon_blood_pressure_records_insert_policy"
on blood_pressure_records for insert
to anon
with check (false);

-- create rls policy for insert operations (authenticated role)
-- authenticated users can only insert their own blood pressure records
create policy "authenticated_blood_pressure_records_insert_policy"
on blood_pressure_records for insert
to authenticated
with check (user_id = auth.uid());

-- create rls policy for update operations (anon role)
-- anon users cannot update blood pressure records
create policy "anon_blood_pressure_records_update_policy"
on blood_pressure_records for update
to anon
using (false)
with check (false);

-- create rls policy for update operations (authenticated role)
-- authenticated users can only update their own blood pressure records
create policy "authenticated_blood_pressure_records_update_policy"
on blood_pressure_records for update
to authenticated
using (user_id = auth.uid())
with check (user_id = auth.uid());

-- create rls policy for delete operations (anon role)
-- anon users cannot delete blood pressure records
create policy "anon_blood_pressure_records_delete_policy"
on blood_pressure_records for delete
to anon
using (false);

-- create rls policy for delete operations (authenticated role)
-- authenticated users can only delete their own blood pressure records
create policy "authenticated_blood_pressure_records_delete_policy"
on blood_pressure_records for delete
to authenticated
using (user_id = auth.uid());

