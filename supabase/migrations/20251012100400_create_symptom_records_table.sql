-- Migration: Create symptom_records table
-- Purpose: Store records of neurological symptoms experienced by users
-- Affected tables: symptom_records
-- Created: 2025-10-12

-- create the symptom_records table
-- this table stores records of neurological symptoms including body part affected,
-- type of pain/sensation, and optional description
create table symptom_records (
  id int generated by default as identity primary key,
  user_id uuid not null references users(id) on delete cascade,
  date date not null,
  body_part body_part_enum not null,
  pain_type pain_type_enum not null,
  description text,
  created_at timestamptz not null default now()
);

comment on table symptom_records is 'Stores records of neurological symptoms.';
comment on column symptom_records.id is 'Unique identifier for each symptom record';
comment on column symptom_records.user_id is 'References the users table with cascade delete';
comment on column symptom_records.date is 'Date when the symptom was experienced';
comment on column symptom_records.body_part is 'Body part affected by the symptom (uses body_part_enum)';
comment on column symptom_records.pain_type is 'Type of neurological symptom (uses pain_type_enum)';
comment on column symptom_records.description is 'Optional text description providing additional details about the symptom';
comment on column symptom_records.created_at is 'Timestamp when the record was created';

-- create index on user_id for efficient queries by user
create index idx_symptom_records_user_id on symptom_records(user_id);

-- create index on date for efficient date-based queries and historical views
create index idx_symptom_records_date on symptom_records(date);

-- enable row level security
-- this ensures users can only access their own symptom records
alter table symptom_records enable row level security;

-- create rls policy for select operations (anon role)
-- anon users cannot select any symptom records
create policy "anon_symptom_records_select_policy"
on symptom_records for select
to anon
using (false);

-- create rls policy for select operations (authenticated role)
-- authenticated users can only select their own symptom records
create policy "authenticated_symptom_records_select_policy"
on symptom_records for select
to authenticated
using (user_id = auth.uid());

-- create rls policy for insert operations (anon role)
-- anon users cannot insert symptom records
create policy "anon_symptom_records_insert_policy"
on symptom_records for insert
to anon
with check (false);

-- create rls policy for insert operations (authenticated role)
-- authenticated users can only insert their own symptom records
create policy "authenticated_symptom_records_insert_policy"
on symptom_records for insert
to authenticated
with check (user_id = auth.uid());

-- create rls policy for update operations (anon role)
-- anon users cannot update symptom records
create policy "anon_symptom_records_update_policy"
on symptom_records for update
to anon
using (false)
with check (false);

-- create rls policy for update operations (authenticated role)
-- authenticated users can only update their own symptom records
create policy "authenticated_symptom_records_update_policy"
on symptom_records for update
to authenticated
using (user_id = auth.uid())
with check (user_id = auth.uid());

-- create rls policy for delete operations (anon role)
-- anon users cannot delete symptom records
create policy "anon_symptom_records_delete_policy"
on symptom_records for delete
to anon
using (false);

-- create rls policy for delete operations (authenticated role)
-- authenticated users can only delete their own symptom records
create policy "authenticated_symptom_records_delete_policy"
on symptom_records for delete
to authenticated
using (user_id = auth.uid());

